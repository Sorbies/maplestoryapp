Changing States Using Clean Copies
 - you don't want to directly modify states
 - clone the state, then modify the clone, then set the state to the clone
 - the spread operator is useful for this
 - let newstate = oldstate; //does NOT create a clean copy. it's a shallow copy

Handler functions
 - <tag onClick={handlerfunction}/> vs <tag onClick={ () => handlerfunction }/>
 - the difference between the former and the latter is that handlerfunction gets
   called first and then is assigned in the former. In the latter, handlerfunction
   gets called only on the event and never gets called immediately.

Effect Hook, CSS, Delayed Rendering
 - When I was unmounting BossingTableC and then remounting it (due to presetMode), why does the CSS not take effect until a state change?
   Also see the CSS not updating with the progress button changes
 - Trying to access the DOM in an effect hook may result in things not happening in the order you expect them.
 - Instead of checking things about the DOM, try to see if you can reprogram your code to be based on the states you used to customize the DOM.
   (Keep it inside the app.)

Using objects as states
 - You need to do a deep copy (meaning, create an entirely separate object) and then set the state to the new cloned object
 - You can't mutate the object property directly in the state.
 - You can use the spread operator to copy all the old fields before updating your new values.
    setPerson({
      ...person, // Copy the old fields
      firstName: e.target.value // But override this one
    });
 - The spread operator only penetrates one level deep, so you have to use the spread operator multiple times if you need to clone nested objects
    setPerson({
      ...person, // Copy other fields
      artwork: { // but replace the artwork
        ...person.artwork, // with the same one
        city: 'New Delhi' // but in New Delhi!
      }
    });

Iterating through arrays vs objects
 - In python, you can iterate through each element by using "for x in iterable:"
 - The equivalent in JavaScript is "for (const x of array)" or "for (const x in object)"

Keys Shennanigans
 - Adding key attributes to an element will cause that element to re-render should the key change.
 - If you gave an input box a key that changes with every input, then that box will lose focus
   every time the key changes.

Data Structure choices
 - If you plan to store data in a dictionary, pick keys that don't have to change
 - If your keys are just gonna be numbers, use an array instead of a dictionary

Images in react
 - Put the assets in the public folder or import them into your file

Using custom classes with local storage
 - Local storage only stores strings, which you obtain by using JSON.stringify() on an object.
 - However, turning an object from a custom class into a string and back using JSON.stringify() and JSON.parse() will turn it into just a generic object.
 - This generic object will now forget the special methods you put in the custom class originally, causing errors when retrieving from the local storage any time you call those methods.
 - To solve this issue, you have to code custom toJSON() and fromJSON() methods for your class so the generic object can remember what it is.
 - The fromJSON() method should return a new object of that class type.

 Using controller/presentational properly
  - Controllers should access/update states and contexts, make API calls, view the database, and cause side effects
  - Presentationals should not know context or make side effects (no useEffect or useContext), but can access data/have its own state for UI purposes.